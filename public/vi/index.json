[
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/5-infrastructure/5.1-install-cdk/",
	"title": "Cài đặt CDK",
	"tags": [],
	"description": "",
	"content": "Chạy lệnh sau để cập nhật Node.js lên phiên bản LTS mới nhất (v20):\nchoco upgrade nodejs.install --version=20.11.0 Kiểm tra xem bạn đã cài đặt phiên bản Node.js mới nhất chưa bằng lệnh:\nnode --version Bạn sẽ thấy kết quả tương tự:\nv20.17.0 Chạy lệnh sau để cập nhật AWS CDK lên phiên bản mới nhất:\nnpm install -g aws-cdk Kiểm tra AWS CDK phiên bản 2 đã được cài đúng chưa bằng lệnh:\ncdk --version Bạn sẽ thấy số phiên bản, ví dụ:\n2.1018.0 (build e629e30) Hãy chắc chắn rằng bạn đang sử dụng CDK v2.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/1-prerequiste/",
	"title": "Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Bạn có thể thực hiện tất cả các bài thực hành trên máy tính cá nhân của mình hoặc sử dụng máy ảo Windows từ xa được cung cấp sẵn với toàn bộ phần mềm đã được cài đặt.\nNếu bạn định làm các bài thực hành trên máy tính cá nhân, bạn sẽ cần một tài khoản AWS và cài đặt các phần mềm sau:\nAWS CLI Node.js (Yêu cầu cho bài thực hành CDK) Visual Studio 2022 AWS Toolkit with Amazon Q Việc thực hiện các bài thực hành trong tài khoản của bạn sẽ phát sinh chi phí. Chi phí này sẽ thay đổi tùy thuộc vào thời gian bạn chạy các bài thực hành và việc có thực hiện dọn dẹp hoàn toàn hay không.\nRefer Cleanup section to clean resources created for the lab.\nBạn phải cài đặt tất cả các công cụ này để có thể hoàn thành các bài thực hành.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/7-aws-graviton/7.1-launch-ec2/",
	"title": "Khởi chạy phiên bản EC2",
	"tags": [],
	"description": "",
	"content": "Đầu tiên, bạn cần khởi chạy một phiên bản EC2 Ubuntu mới sử dụng bộ xử lý AWS Graviton.\nTại trang AWS Console, nhấp vào liên kết EC2 trong phần Compute (hoặc tìm kiếm EC2). Nhấp vào nút Launch Instance.\nBạn đang chọn Ubuntu Server vì đây là một trong những bản phân phối Linux được .NET 8 hỗ trợ và có thể chạy trên kiến trúc Arm64. Bạn có thể xem danh sách các bản phân phối Linux được hỗ trợ cho .NET tại đây: Install .NET on Linux\nĐặt tên cho phiên bản mới là DotNet8Graviton3 và chọn Ubuntu AMI từ menu Quick Start; Chọn Ubuntu Server 24.04 LTS từ danh sách AMI; Chọn kiến trúc 64-bit (Arm). Tiếp theo, chọn loại phiên bản tối ưu hóa tính toán c7g.medium, cung cấp 1 vCPU và 2GB bộ nhớ.\nTiếp theo, bạn cần tạo mới hoặc cung cấp một cặp khóa hiện có. Tạo và tải về cặp khóa.\nSau đó, trong phần thiết lập mạng, cấu hình một security group mới:\nMở cổng 5000 để có thể truy cập ứng dụng web khi nó chạy. Nhấp vào Launch Instance.\nBây giờ phiên bản của bạn đang được khởi chạy và bạn có thể nhấp vào nút View Instances để xem trạng thái của các phiên bản trong tài khoản AWS của bạn.\nChúng ta đã sẵn sàng để kết nối với phiên bản c7g. Cách dễ nhất là sử dụng Session Manager ngay từ AWS Console.\nSau khi kết nối thành công, bạn sẽ ở tại dòng lệnh Ubuntu.\nChạy lệnh sau:\nuname -i Lệnh này sẽ hiển thị rằng chúng ta đang chạy trên kiến trúc ‘aarch64’ – tên kiến trúc của Linux cho nền tảng Arm 64-bit:\naarch64 Chúc mừng! Bạn đã khởi chạy và kết nối thành công với phiên bản Ubuntu sử dụng AWS Graviton!\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/4-securely/4.1-configuration/",
	"title": "Sử dụng cấu hình .NET Core",
	"tags": [],
	"description": "",
	"content": "Cấu hình trong .NET Core khá khác so với những gì bạn từng dùng trong .NET Framework. Với .NET Framework, bạn chỉ có một nguồn cấu hình duy nhất là file app.config/web.config, và nếu muốn sử dụng các nguồn cấu hình khác, bạn phải tự tạo giải pháp cấu hình riêng.\nHệ thống cấu hình của .NET Core được thiết kế để có thể mở rộng dễ dàng. Ví dụ, khi bạn tạo ứng dụng ASP.NET Core, mặc định nó sẽ lấy thông tin cấu hình từ file appsettings.json, các tham số dòng lệnh (command line arguments) và biến môi trường (environment variables). Bạn cũng có thể thêm vào các nguồn cấu hình khác (configuration source providers) rồi cho phép ứng dụng truy cập cấu hình đó qua cùng một giao diện (interface).\nAWS cung cấp một gói NuGet có tên là Amazon.Extensions.Configuration.SystemsManager, giúp đơn giản hóa cách ứng dụng của bạn tải các thiết lập cấu hình trong AWS Systems Manager Parameter Store vào hệ thống cấu hình của .NET Core.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/2-serverless-compute/2.1-create-project/",
	"title": "Tạo dự án",
	"tags": [],
	"description": "",
	"content": "Sau khi đăng nhập vào EC2 qua kết nối RDP, chờ vài phút để các ứng dụng tải và thanh taskbar hiển thị đầy đủ.\nKhởi chạy Visual Studio 2022 từ thanh taskbar.\nNhấp vào Create new project.\nTrong ô tìm kiếm mẫu (template searchbox), nhập lambda và sau đó chọn mẫu AWS Lambda Project (.NET Core - C#). Nhiều mẫu AWS khác nhau đã được cài đặt như một phần của AWS Toolkit for Visual Studio.\nNhấp Next\nĐặt tên cho project là ImageResize. Nhấp Next.\nChọn Simple S3 Function blueprint. Nhấp Finish.\nHãy xem qua project mẫu được tạo ra:\nTệp aws-lambda-tools-defaults.json chứa thông tin về AWS Lambda runtime và tham chiếu đến AWS Lambda function handler. Tệp Function.cs Chứa AWS Lambda function handler. "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/3-amazon-api-gateway/3.1-create-project/",
	"title": "Tạo dự án",
	"tags": [],
	"description": "",
	"content": "Tạo dự án mới sử dụng mẫu AWS Serverless Application (.NET Core - C#).\nChọn mẫu ASP.NET Core Minimal API blueprint.\nXem qua dự án mẫu được tạo:\nFile aws-lambda-tools-defaults.json chứa tham chiếu đến mẫu AWS Serverless Application Model (SAM) được sử dụng để triển khai ứng dụng serverless\nFile serverless-template chứa mẫu AWS Serverless Application Model (SAM)\nFile Program.cs thêm hỗ trợ AWS Lambda. // Khi ứng dụng chạy trong Lambda, Kestrel được thay thế bằng Amazon.Lambda.AspNetCoreServer làm web server. // Gói này sẽ hoạt động như webserver, chuyển đổi yêu cầu và phản hồi giữa nguồn sự kiện Lambda và ASP.NET Core. builder.Services.AddAWSLambdaHosting(LambdaEventSource.RestApi); "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/4-securely/4.2-sdk/4.2.1-create-iam-role/",
	"title": "Tạo IAM ROLE",
	"tags": [],
	"description": "",
	"content": "Trên trang AWS Console, nhấp vào liên kết IAM trong phần Security, Identity \u0026amp; Compliance (hoặc tìm kiếm IAM).\nTrên trang IAM, chọn mục Roles ở bên trái.\nTrên trang roles, nhấn nút Create role.\nỞ màn hình tiếp theo, chọn Lambda làm dịch vụ sẽ sử dụng vai trò này, sau đó nhấn nút Next.\nTrên trang phân quyền, tìm kiếm vai trò AmazonSSMReadOnlyAccess và chọn nó. Bạn đang cấp quyền chỉ đọc cho AWS Systems Manager để lấy tham số từ Parameter Store. Nhấn nút Next.\nTrên trang xem lại, nhập tên vai trò phù hợp, ví dụ DojoLambdaSSMRole.\nCuối cùng, nhấn nút Create Role.\nVai trò đã được tạo. Hãy nhớ tên vai trò này vì bạn sẽ cần khi triển khai hàm Lambda sau.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/4-securely/4.1-configuration/4.1.1-create-parameter/",
	"title": "Tạo tham số (parameter)",
	"tags": [],
	"description": "",
	"content": "Trên trang AWS Console, tìm kiếm Systems Manager.\nTrên trang Systems Manager, nhấp vào mục Parameter Store ở bên trái.\nTrên trang Parameter Store, nhấn nút Create parameter.\nỞ trang chi tiết tham số, nhập tên tham số là /SampleApp/ConnectionStrings/MyConnection, chọn loại là SecureString, chọn nguồn khóa KMS là My current account và ID khóa KMS là alias/aws/ssm (mặc định). Cuối cùng nhập giá trị cho tham số rồi nhấn nút Create parameter.\nTham số đã được tạo và giá trị tham số được lưu dưới dạng mã hóa sử dụng khóa AWS KMS.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/6-adding-innovation/6.1-find-insights/",
	"title": "Tìm hiểu thông tin từ văn bản bằng Amazon Comprehend",
	"tags": [],
	"description": "",
	"content": "Amazon Comprehend là một dịch vụ xử lý ngôn ngữ tự nhiên (NLP) sử dụng machine learning để tìm kiếm thông tin và mối quan hệ trong văn bản. Không yêu cầu có kinh nghiệm với machine learning.\nTrong bài lab này, bạn sẽ sử dụng Amazon Comprehend để phát hiện ngôn ngữ của văn bản và hiểu được cảm xúc của một đoạn đánh giá sách mẫu.\nTạo dự án Tạo một dự án .NET Console App mới. Chọn .NET 8.0 framework:\nThêm gói NuGet AWSSDK.Comprehend vào dự án: Thêm các lệnh import sau vào Program.cs: using Amazon.Comprehend; using Amazon.Comprehend.Model; Thêm đoạn mã sau để khởi tạo AmazonComprehendClient: var comprehendClient = new AmazonComprehendClient(Amazon.RegionEndpoint.EUWest1); Khi bạn khởi tạo AmazonComprehendClient của AWS SDK, bạn cần truyền vào RegionEndpoint tương ứng với khu vực bạn đang thực hiện lab. Đoạn mã trên khởi tạo client ở khu vực EUWest1.\nThêm văn bản mẫu để làm việc (hoặc bạn có thể thay bằng đoạn văn bản khác để thử nghiệm): var text = \u0026#34;This was such a beautiful book. I wasn\u0026#39;t even planning any travel when I came across this and just started flipping through the pages. I really like the cover and all the large glossy photographs in this book. John Smith did a wonderful job with the photography. I\u0026#39;ve found a perfect home for this on my coffee table. I\u0026#39;m planning a trip to Paris and Barcelona soon and I know this will come in handy. In the meantime, it\u0026#39;s perfect for assisting this armchair traveler!\u0026#34;; Thêm đoạn mã sau để phát hiện ngôn ngữ của đoạn văn bản. Đoạn mã này tạo một đối tượng DetectDominantLanguageRequest và gọi phương thức DetectDominantLanguageAsync: var detectDominantLanguageRequest = new DetectDominantLanguageRequest() { Text = text }; var detectDominantLanguageResponse = await comprehendClient.DetectDominantLanguageAsync(detectDominantLanguageRequest); Console.WriteLine(\u0026#34;Detect Dominant Language:\u0026#34;); Console.WriteLine(\u0026#34;==========================\u0026#34;); foreach (var dominantLanguage in detectDominantLanguageResponse.Languages) { Console.WriteLine($\u0026#34;Language Code: {dominantLanguage.LanguageCode}, Score: {dominantLanguage.Score}\u0026#34;); } Chạy chương trình và kiểm tra xem ngôn ngữ đã được phát hiện chính xác với độ tin cậy cao hay chưa:\nThêm đoạn mã sau để phát hiện cảm xúc của văn bản. Đoạn mã này tạo một đối tượng DetectSentimentRequest và gọi phương thức DetectSentimentAsync: // 2 - Detect sentiment of the text var detectSentimentRequest = new DetectSentimentRequest() { Text = text, LanguageCode = \u0026#34;en\u0026#34; }; var detectSentimentResponse = await comprehendClient.DetectSentimentAsync(detectSentimentRequest); Console.WriteLine(\u0026#34;Detect Sentiment:\u0026#34;); Console.WriteLine(\u0026#34;==========================\u0026#34;); Console.WriteLine(detectSentimentResponse.Sentiment); Chạy chương trình và kiểm tra xem cảm xúc của văn bản đã được phát hiện đúng hay chưa:\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/",
	"title": "Xây dựng các ứng dụng .NET 8 sử dụng AWS",
	"tags": [],
	"description": "",
	"content": "Xây dựng các ứng dụng .NET 8 sử dụng AWS Overall Workshop này dành cho các lập trình viên .NET chưa hoặc ít có kinh nghiệm với AWS. Tham gia workshop, bạn sẽ làm quen với nền tảng AWS qua việc xây dựng một chuỗi ứng dụng .NET 8 sử dụng AWS.\nBạn sẽ học được:\nLàm quen với AWS Toolkit cho Visual Studio 2022 Làm quen với AWS SDK cho .NET Phát triển ứng dụng đám mây gốc (cloud native) với .NET trên AWS Thêm các tính năng AI vào ứng dụng .NET Định nghĩa hạ tầng đám mây bằng .NET Trong workshop, bạn sẽ sử dụng các dịch vụ AWS sau:\nAmazon S3 AWS Lambda Amazon API Gateway AWS Systems Manager Parameter Store Amazon Cognito Amazon CloudWatch AWS AI Services AWS Cloud Development Kit (CDK) Amazon EC2 Content Chuẩn bị Điện toán không máy chủ với AWS Lambda Amazon API Gateway Lưu trữ bí mật an toàn Xác thực với Amazon Cognito Tự động hóa hạ tầng với CDK .NET Thêm đổi mới với các dịch vụ AI của AWS .NET 8 trên AWS Graviton Dọn dẹp tài nguyên "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/7-aws-graviton/7.2-install/",
	"title": "Cài đặt .NET 8 SDK",
	"tags": [],
	"description": "",
	"content": "Bây giờ chúng ta sẽ tải xuống và cài đặt .NET 8 SDK.\nTruy cập trang web chính thức của .NET 8: .NET 8 để lấy liên kết tải xuống trực tiếp các tệp nhị phân mới nhất của .NET 8 SDK:\nNhấp vào Arm64 và sao chép liên kết tải xuống trực tiếp:\nLiên kết tải về cho .NET 8 SDK 8.0.303 là:\nsudo wget https://download.visualstudio.microsoft.com/download/pr/4bfdbe1a-e1f9-4535-8da6-6e1e7ea0994c/b110641d008b36dded561ff2bdb0f793/dotnet-sdk-8.0.303-linux-arm64.tar.gz Tạo thư mục mới và giải nén SDK vào đó (vui lòng thay đổi số phiên bản tương ứng với phiên bản SDK bạn đã tải xuống):\nmkdir -p $HOME/dotnet \u0026amp;\u0026amp; tar zxf dotnet-sdk-8.0.303-linux-arm64.tar.gz -C $HOME/dotnet export DOTNET_ROOT=$HOME/dotnet export PATH=$PATH:$HOME/dotnet Bây giờ bạn có thể kiểm tra xem quá trình cài đặt có thành công không bằng cách chạy:\ndotnet --info Kết quả đầu ra bạn sẽ thấy thông tin về phiên bản SDK, tương tự như sau:\nChúc mừng! Bạn đã cài đặt thành công .NET 8 SDK!\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/5-infrastructure/5.2-create/",
	"title": "Create test project",
	"tags": [],
	"description": "",
	"content": "Tạo thư mục trống mới:\nmkdir cdk-lab cd cdk-lab Bạn tạo một dự án AWS CDK mới bằng cách chạy cdk init trong thư mục trống. cdk init sử dụng tên thư mục dự án để đặt tên cho các phần tử khác nhau trong dự án, bao gồm lớp, thư mục con và tập tin. Dự án được tạo bao gồm tham chiếu tới Amazon.CDK.Lib NuGet package. Package này và các phụ thuộc sẽ được NuGet tự động cài đặt.\nChạy cdk init trong thư mục đó với các tham số sau:\nsample-app là mẫu ứng dụng CDK ví dụ có một số construct \u0026ndash;language csharp chỉ định bạn muốn dùng ngôn ngữ C# cdk init sample-app --language csharp Bạn sẽ thấy đầu ra như sau (lưu ý tên dự án CdkLab dựa trên tên thư mục bạn tạo):\nMở tập tin CdkLab.sln mới được tạo trong Visual Studio.\nMở Program.cs. Tập tin này khởi tạo lớp CdkLabStack từ file CdkLabStack.cs.\nusing Amazon.CDK; namespace CdkLab { sealed class Program { public static void Main(string[] args) { var app = new App(); new CdkLabStack(app, \u0026#34;CdkLabStack\u0026#34;); app.Synth(); } } } Mở CdkLabStack.cs.\nusing Amazon.CDK; using Amazon.CDK.AWS.SNS; using Amazon.CDK.AWS.SNS.Subscriptions; using Amazon.CDK.AWS.SQS; using Constructs; namespace CdkLab { public class CdkLabStack : Stack { internal CdkLabStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { // The CDK includes built-in constructs for most resource types, such as Queues and Topics. var queue = new Queue(this, \u0026#34;CdkLabQueue\u0026#34;, new QueueProps { VisibilityTimeout = Duration.Seconds(300) }); var topic = new Topic(this, \u0026#34;CdkLabTopic\u0026#34;); topic.AddSubscription(new SqsSubscription(queue)); } } } Mẫu ứng dụng sample-app đã tạo cho bạn một stack với nội dung sau:\nStack bao gồm:\nAmazon SQS Queue (một Queue mới) Amazon SNS Topic (một Topic mới) Đăng ký hàng đợi để nhận các tin nhắn được phát tới topic (topic.AddSubscription) "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/6-adding-innovation/6.2-localize-content/",
	"title": "Địa phương hóa nội dung bằng Amazon Translate",
	"tags": [],
	"description": "",
	"content": "Amazon Translate là một dịch vụ dịch máy bằng mạng nơ-ron cung cấp bản dịch ngôn ngữ nhanh, chất lượng cao và chi phí thấp. Dịch máy bằng mạng nơ-ron là một hình thức tự động dịch ngôn ngữ sử dụng các mô hình học sâu để mang lại bản dịch chính xác hơn và tự nhiên hơn so với các thuật toán dịch dựa trên thống kê và quy tắc truyền thống. Amazon Translate cho phép bạn địa phương hóa nội dung – như trang web và ứng dụng – cho người dùng quốc tế, và dễ dàng dịch khối lượng lớn văn bản một cách hiệu quả.\nTrong bài lab này, chúng ta sẽ sử dụng Amazon Translate để dịch văn bản từ tiếng Anh sang tiếng Pháp.\nTạo dự án Thêm gói Nuget AWSSDK.Translate vào dự án của bạn: Thêm các lệnh using sau vào file Program.cs: using Amazon.Translate; using Amazon.Translate.Model; Thêm đoạn mã sau để khởi tạo AmazonTranslateClient: var translateClient = new AmazonTranslateClient(Amazon.RegionEndpoint.EUWest1); Lưu ý rằng khi bạn khởi tạo AmazonTranslateClient của AWS SDK, bạn cần truyền vào RegionEndpoint của khu vực mà bạn đang thực hiện lab. Đoạn mã bên dưới khởi tạo client tại khu vực EUWest1.\nThêm đoạn mã sau để dịch văn bản: var translatRequest = new TranslateTextRequest { Text = text, SourceLanguageCode = \u0026#34;en\u0026#34;, TargetLanguageCode = \u0026#34;fr\u0026#34; }; var translatResponse = await translateClient.TranslateTextAsync(translatRequest); Console.WriteLine(\u0026#34;Translation to French:\u0026#34;); Console.WriteLine(\u0026#34;==========================\u0026#34;); Console.WriteLine(translatResponse?.TranslatedText); Chạy chương trình và xác nhận rằng văn bản đã được dịch chính xác:\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/2-serverless-compute/",
	"title": "Điện toán không máy chủ với AWS Lambda",
	"tags": [],
	"description": "",
	"content": "Trong bài thực hành này, bạn sẽ tạo một dự án AWS Lambda đơn giản bằng Visual Studio 2022. Bạn sẽ xây dựng một hàm AWS Lambda có chức năng tạo hình ảnh thu nhỏ đen trắng (B\u0026amp;W thumbnail) mỗi khi một hình ảnh được lưu vào Amazon S3 bucket.\nCác bài tập sau cần được thực hiện theo thứ tự để hoàn thành bài thực hành này:\nTạo một dự án AWS Lambda (sử dụng C# và .NET 8) Tạo một Amazon S3 bucket Tạo một vai trò AWS IAM Triển khai hàm AWS Lambda từ Visual Studio 2022 Tạo và liên kết sự kiện S3 với hàm AWS Lambda của bạn Tải lên các tệp và kiểm tra xem hàm AWS Lambda có được thực thi và hình ảnh thu nhỏ có được tạo hay không "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/4-securely/4.2-sdk/",
	"title": "Sử dụng AWS SDK và Lambda",
	"tags": [],
	"description": "",
	"content": "Trong bài tập sau, chúng ta sẽ sử dụng hàm AWS Lambda để lấy tham số mà chúng ta đã tạo trong bài tập trước bằng cách sử dụng AWS SDK.\nCác công việc được thực hiện trong bài lab bao gồm:\nTạo IAM Role cho AWS Lambda Tạo hàm AWS Lambda Triển khai và kiểm tra hàm AWS Lambda "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/4-securely/4.1-configuration/4.1.2-create-asp.net/",
	"title": "Tạo dự án ASP.NET Core",
	"tags": [],
	"description": "",
	"content": "Tạo dự án mới ASP.NET Core Web API.\nĐặt tên dự án là ParameterStoreDemo\nChọn .NET 8.0 và bỏ chọn hỗ trợ HTTPS:\nSau khi dự án được tạo, thêm gói NuGet Amazon.Extensions.Configuration.SystemsManager vào dự án.\nTiếp theo, bạn cần kích hoạt provider cấu hình mới trong code.\nĐối với ứng dụng ASP.NET Core, bạn có thể thực hiện trong file Program.cs bằng cách thêm dòng sau trước đoạn var app = builder.Build();:\nbuilder.Configuration.AddSystemsManager(\u0026#34;/SampleApp\u0026#34;); Thêm API mới để đọc chuỗi kết nối từ cấu hình bằng cách thêm đoạn code sau vào file Program.cs trước app.Run();:\napp.MapGet(\u0026#34;/connection\u0026#34;, (IConfiguration configuration) =\u0026gt; { var connectionString = configuration.GetConnectionString(\u0026#34;MyConnection\u0026#34;); return connectionString; }); Xây dựng và chạy dự án, kiểm tra chuỗi kết nối được hiển thị dưới dạng đã giải mã.\nChúc mừng! Bạn đã cấu hình thành công nguồn cấu hình AWS Systems Manager và truy xuất tham số từ Parameter Store bằng giao diện chuẩn IConfiguration.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/4-securely/4.2-sdk/4.2.2-create-aws-lambda/",
	"title": "Tạo dự án AWS Lambda",
	"tags": [],
	"description": "",
	"content": "Tạo dự án mới sử dụng mẫu AWS Lambda Project (.NET Core - C#).\nTrong cửa sổ Select Blueprint, chọn blueprint Empty Top-level Function và nhấn nút Finish.\nSau khi dự án được tạo, thêm gói NuGet AWSSDK.SimpleSystemsManagement vào dự án.\nMở file Function.cs và thêm các câu lệnh using sau:\nusing Amazon.SimpleSystemsManagement; using Amazon.SimpleSystemsManagement.Model; Trong file Function.cs, thay thế handler hiện có bằng đoạn mã sau:\nvar handler = async (string input, ILambdaContext context) =\u0026gt; { var client = new AmazonSimpleSystemsManagementClient(); var request = new GetParameterRequest { Name = \u0026#34;/SampleApp/ConnectionStrings/MyConnection\u0026#34;, WithDecryption = true }; GetParameterResponse response = await client.GetParameterAsync(request); return string.Format(\u0026#34;Decrypted Value: {0}\u0026#34;, response.Parameter.Value); }; Mã đã sẵn sàng. Hãy xây dựng (Build) dự án Lambda.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/3-amazon-api-gateway/3.2-add-logging/",
	"title": "Thêm logging",
	"tags": [],
	"description": "",
	"content": "Cập nhật file Program.cs với API khác và thêm logging bằng cách thêm đoạn mã sau ngay sau app.MapGet hiện tại:\napp.MapGet(\u0026#34;/values\u0026#34;, (HttpRequest request) =\u0026gt; { app.Logger.LogInformation($\u0026#34;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; GET values request from {request.HttpContext.Connection.RemoteIpAddress}\u0026#34;); return new string[] { \u0026#34;value1\u0026#34;, \u0026#34;value2\u0026#34; }; }); "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/2-serverless-compute/2.2-add-code/",
	"title": "Thêm mã để tạo ảnh thu nhỏ (thumbnails)",
	"tags": [],
	"description": "",
	"content": "Thêm gói NuGet SixLabors.ImageSharp vào dự án:\nThêm các lệnh using sau vào file Function.cs:\nusing Amazon.Lambda.Core; using Amazon.Lambda.S3Events; using Amazon.S3; using Amazon.S3.Model; using System.IO; using SixLabors.ImageSharp; using SixLabors.ImageSharp.Processing; using SixLabors.ImageSharp.PixelFormats; using SixLabors.ImageSharp.Formats.Jpeg; Thay thế phương thức FunctionHandler trong file Function.cs bằng đoạn mã dưới đây:\npublic async Task FunctionHandler(S3Event evnt, ILambdaContext context) { string[] fileExtentions = new string[] { \u0026#34;.jpg\u0026#34;, \u0026#34;.jpeg\u0026#34; }; var s3Event = evnt.Records?[0].S3; if (s3Event == null) { return; } try { foreach (var record in evnt.Records) { context.Logger.Log(\u0026#34;----\u0026gt; File: \u0026#34; + record.S3.Object.Key); if (!fileExtentions.Contains(Path.GetExtension(record.S3.Object.Key).ToLower())) { context.Logger.Log(\u0026#34;File Extention is not supported - \u0026#34; + s3Event.Object.Key); continue; } Stream imageStream = new MemoryStream(); var objectResponse = await S3Client.GetObjectAsync(record.S3.Bucket.Name, record.S3.Object.Key); using (Stream responseStream = objectResponse.ResponseStream) { using (var image = Image.Load(responseStream)) { // Create B\u0026amp;W thumbnail image.Mutate(ctx =\u0026gt; ctx.Grayscale().Resize(200, 200)); image.Save(imageStream, new JpegEncoder()); imageStream.Seek(0, SeekOrigin.Begin); } } // Creating a new S3 ObjectKey for the thumbnails string thumbnailObjectKey = \u0026#34;\u0026#34;; string objectKey = record.S3.Object.Key.ToLower(); int endSlash = objectKey.LastIndexOf(\u0026#34;/\u0026#34;); if (endSlash \u0026gt; 0) { string S3ObjectName = objectKey.Substring(endSlash + 1); int beginSlash = objectKey.Substring(0, endSlash - 1).LastIndexOf(\u0026#34;/\u0026#34;); if (beginSlash \u0026gt; 0) { thumbnailObjectKey = objectKey.Substring(0, beginSlash) + \u0026#34;thumbnails/\u0026#34; + S3ObjectName; } else { thumbnailObjectKey = \u0026#34;thumbnails/\u0026#34; + S3ObjectName; } } else { thumbnailObjectKey = \u0026#34;thumbnails/\u0026#34; + objectKey; } context.Logger.Log(\u0026#34;----\u0026gt; Thumbnail file Key: \u0026#34; + thumbnailObjectKey); await S3Client.PutObjectAsync(new PutObjectRequest { BucketName = record.S3.Bucket.Name, Key = thumbnailObjectKey, InputStream = imageStream }); } context.Logger.Log(\u0026#34;Processed \u0026#34; + evnt.Records.Count.ToString()); } catch (Exception e) { context.Logger.LogLine($\u0026#34;Error getting object {s3Event.Object.Key} from bucket {s3Event.Bucket.Name}\u0026#34;); context.Logger.LogLine($\u0026#34;Make sure they exist and your bucket is in the same region as this function\u0026#34;); context.Logger.LogLine(e.Message); context.Logger.LogLine(e.StackTrace); throw; } } Đoạn mã trên thực hiện các tác vụ sau:\nLiệt kê tất cả các tệp được nhận như một phần của S3Event:\nforeach (var record in evnt.Records) Tải tệp xuống từ S3 bucket\nvar objectResponse = await S3Client.GetObjectAsync(record.S3.Bucket.Name, record.S3.Object.Key) Thay đổi kích thước và chuyển nó sang đen trắng:\nimage.Mutate(ctx =\u0026gt; ctx.Grayscale().Resize(200, 200)); image.Save(imageStream, new JpegEncoder()); Saves generated thumbnail back to S3 bucket:\nawait S3Client.PutObjectAsync(new PutObjectRequest { BucketName = record.S3.Bucket.Name, Key = thumbnailObjectKey, InputStream = imageStream }); "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/3-amazon-api-gateway/",
	"title": "Amazon API Gateway",
	"tags": [],
	"description": "",
	"content": "Trong bài thực hành này, bạn sẽ tạo một ứng dụng ASP.NET Web API đơn giản, triển khai nó bằng AWS Serverless Application Model (SAM) trên AWS Lambda, và sau đó cấu hình Amazon API Gateway làm lớp proxy phía trước các endpoint của Web API.\nAmazon API Gateway là một dịch vụ được quản lý hoàn toàn, giúp các nhà phát triển dễ dàng tạo, xuất bản, duy trì, giám sát và bảo mật các API ở mọi quy mô. Bằng cách sử dụng Amazon API Gateway trước các endpoint của API trong ứng dụng của bạn, bạn có thể áp dụng giới hạn truy cập (throttling), bảo mật, giám sát và ghi log, cải thiện hiệu năng bằng tính năng cache của dịch vụ, cũng như quản lý phiên bản và tài liệu dành cho nhà phát triển (bao gồm hỗ trợ Swagger).\nBạn sẽ hoàn thành các bài tập sau trong bài thực hành này: Tạo một ASP.NET Web API bằng mẫu AWS Serverless Application Thêm ghi log vào Web API Triển khai ASP.NET Web API lên Amazon API Gateway được hỗ trợ bởi AWS Lambda Kiểm tra cấu hình giới hạn truy cập (Throttling) của Amazon API Gateway "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/4-securely/4.3-cleanup/",
	"title": "Dọn dẹp",
	"tags": [],
	"description": "",
	"content": "\rBạn nên lưu ý rằng hành động này không thể hoàn tác. Vì vậy, nếu trong hàm đó có chứa đoạn mã hoặc cấu hình quan trọng, hãy đảm bảo rằng bạn đã sao lưu trước khi thực hiện\nĐăng nhập AWS Console. Vào phần Services, tìm kiếm và chọn Systems Manager, sau đó truy cập mục Parameter Store để quản lý các tham số cấu hình.\nChọn parameter cần xóa: tick vào ô bên trái tên parameter, ví dụ: /SampleApp/ConnectionStrings/MyConnection\nNhấn nút \u0026ldquo;Delete\u0026rdquo; ở góc phía trên bên phải.\nXác nhận việc xóa khi được hỏi.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/6-adding-innovation/6.3-cleanup/",
	"title": "Dọn dẹp",
	"tags": [],
	"description": "",
	"content": "\rBạn nên lưu ý rằng hành động này không thể hoàn tác. Vì vậy, nếu trong hàm đó có chứa đoạn mã hoặc cấu hình quan trọng, hãy đảm bảo rằng bạn đã sao lưu trước khi thực hiện\nLab này không tạo ra tài nguyên lâu dài trong AWS (như S3, Lambda, DynamoDB,\u0026hellip;), nên không cần vào AWS Console để cleanup.\nTuy nhiên, cần lưu ý:\nNếu bạn sử dụng Access Key thủ công để cấu hình SDK, hãy xóa hoặc vô hiệu hóa key IAM sau khi lab xong để tránh rò rỉ hoặc sử dụng ngoài ý muốn.\nXóa thư mục project trong máy nếu bạn không còn sử dụng, giúp tránh chạy lại nhầm và giữ máy gọn gàng hơn.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/2-serverless-compute/2.3-create-s3-bucket/",
	"title": "Tạo S3 bucket",
	"tags": [],
	"description": "",
	"content": "Cách dễ nhất để tạo một Amazon S3 bucket là sử dụng AWS Toolkit cho Visual Studio 2022.\nTrong AWS Explorer, chọn vùng của bạn Asia Pacific (Singapore)(ap-southeast-1), nhấp chuột phải vào Amazon S3 và chọn Create bucket\u0026hellip;\nĐặt tên cho bucket của bạn là \u0026lt;YOUR_NAME\u0026gt;-image-resize-lab (để nó là duy nhất).\nKhi S3 bucket được tạo, bạn sẽ thấy nó dưới mục Amazon S3 trong AWS Explorer.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/7-aws-graviton/7.3-create-sample/",
	"title": "Tạo ứng dụng web mẫu .NET 8",
	"tags": [],
	"description": "",
	"content": "Bây giờ bạn đã cài đặt .NET 8 SDK, bạn có thể tạo ứng dụng web mẫu .NET:\nTạo thư mục mới:\nmkdir ~/awesomeapp cd ~/awesomeapp Chạy lệnh dotnet new webapp để tạo dự án mới dựa trên mẫu webapp (ASP.NET Core Web App):\ndotnet new webapp Bây giờ bạn có thể build và chạy ứng dụng web mẫu .NET được tạo, và mở cổng 5000 để truy cập:\ndotnet run --urls=http://0.0.0.0:5000 Khi bạn thấy kết quả đầu ra như dưới đây, bạn có thể sử dụng trình duyệt web để truy cập ứng dụng:\nTrên trang AWS Console, nhấp vào liên kết EC2 trong phần Compute (hoặc tìm kiếm EC2) và tìm đến instance EC2 của bạn. Sao chép địa chỉ IPv4 công khai của instance.\nMở trình duyệt web và truy cập địa chỉ IPv4 công khai của instance, cổng 5000:\nChúc mừng! Bạn đã có ứng dụng web .NET 8 chạy thành công trên instance AWS Graviton!\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/5-infrastructure/5.3-deploy/",
	"title": "Triển khai dự án thử nghiệm",
	"tags": [],
	"description": "",
	"content": " AWS CDK apps thực chất chỉ là một định nghĩa về hạ tầng của bạn bằng cách sử dụng code. Khi các CDK apps được chạy, chúng tạo ra (hoặc “synthesize”, theo thuật ngữ CDK) một AWS CloudFormation template cho mỗi stack được định nghĩa trong ứng dụng của bạn.\nĐể tổng hợp (synthesize) một CloudFormation template từ một CDK app, sử dụng lệnh cdk synth\nCDK CLI yêu cầu bạn phải ở cùng thư mục với file cdk.json của bạn.\nHãy xem template được tổng hợp từ ứng dụng mẫu:\ncdk synth Nó sẽ xuất ra template CloudFormation như sau:\nNhư bạn thấy, template này bao gồm bốn resources:\nAWS::SQS::Queue - hàng đợi của chúng ta AWS::SQS::QueuePolicy - chính sách IAM cho phép topic này gửi tin nhắn tới hàng đợi AWS::SNS::Subscription - sự đăng ký giữa hàng đợi và topic AWS::SNS::Topic - topic của chúng ta Bootstrapping an enviroment\nLần đầu tiên bạn triển khai một AWS CDK app vào một môi trường (account/region), bạn sẽ cần cài đặt một “bootstrap stack”. Stack này bao gồm các resources cần thiết cho hoạt động của toolkit. Ví dụ, stack này có một S3 bucket dùng để lưu template và assets trong quá trình triển khai.\nBạn có thể dùng lệnh cdk bootstrap để cài đặt bootstrap stack vào một môi trường:\nCDK CLI yêu cầu bạn phải ở cùng thư mục với file cdk.json của bạn.\ncdk bootstrap Bạn sẽ thấy kết quả như sau:\nDeploy stack\nĐể triển khai các resources được định nghĩa trong AWS CDK app lên AWS, sử dụng lệnh cdk deploy.\ncdk deploy Bạn sẽ thấy cảnh báo như sau:\nĐây là cảnh báo rằng việc triển khai app có thể gây ra một số rủi ro. Vì chúng ta cần cho phép topic gửi tin nhắn đến hàng đợi, nhập y để triển khai stack và tạo các resources.\nKết quả xuất ra sẽ như sau:\nThe CloudFormation Console\nCDK apps được triển khai thông qua AWS CloudFormation. Mỗi CDK stack tương ứng 1:1 với CloudFormation stack.\nĐiều này có nghĩa là bạn có thể sử dụng console AWS CloudFormation để quản lý các stack của mình.\nHãy cùng xem console AWS CloudFormation. Vào AWS Console và tìm kiếm CloudFormation.\nLọc danh sách các stack theo từ khóa cdk và bạn sẽ thấy hai CDK stack đã được triển khai:\nCDKToolkit - CDK Toolkit Stack. Nó được tạo bởi cdk bootstrap và quản lý các resources cần thiết để quản lý các Cloud Applications với AWS CDK. CdkLabStack - CDK stack mẫu mà bạn vừa triển khai bằng lệnh cdk deploy. Chọn CdkLabStack và mở tab Resources:\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/3-amazon-api-gateway/3.3-publish-project/",
	"title": "Xuất bản dự án",
	"tags": [],
	"description": "",
	"content": "Sau khi xây dựng giải pháp của bạn, nhấp chuột phải vào dự án trong Solution Explorer và chọn Publish to AWS Lambda\u0026hellip; để khởi chạy trình hướng dẫn xuất bản.\nĐảm bảo ô chọn Account profile to use và Region được thiết lập đúng với hồ sơ và vùng bạn đang dùng cho bài lab hôm nay.\nTrong phần Stack Name, nhập tên stack như aws-serverless-api-test.\nSau đó, nhấp vào New\u0026hellip; dưới mục Amazon S3 Bucket và tạo một bucket mới với tên duy nhất như aws-serverless-api-test-SOMENUMBER.\nBây giờ chờ ứng dụng Serverless được triển khai, khi hoàn tất trạng thái sẽ là CREATE_COMPLETE.\nTruy cập AWS Serverless URL (thêm /values vào cuối URL) để gọi phương thức API bạn đã tạo. Trình duyệt sẽ hiển thị JSON cho value1 và value2.\nhttps://nxlwjdj8ol.execute-api.eu-west-1.amazonaws.com/Prod/values Chúc mừng! Bạn đã có ASP.NET Web API chạy phía sau Amazon API Gateway!\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/4-securely/4.2-sdk/4.2.3-publish/",
	"title": "Xuất bản dự án",
	"tags": [],
	"description": "",
	"content": "Để triển khai hàm, nhấp chuột phải vào dự án Lambda và chọn tùy chọn Publish to AWS Lambda\u0026hellip;\nNhập tên hàm là SSMDemo. Giữ nguyên các thiết lập mặc định khác và nhấn nút Next.\nTrên màn hình Advanced Function Details, chọn lại vai trò mà bạn đã tạo trong bài tập đầu tiên (vai trò này có quyền truy cập AWS Systems Manager Parameter Store). Nhấn nút Upload.\nQuá trình tải lên sẽ bắt đầu triển khai hàm. Khi hàm AWS Lambda được tải lên thành công, màn hình triển khai sẽ đóng và màn hình kiểm thử sẽ mở ra.\nNhập một chuỗi bất kỳ làm input (vì input ở đây không có ý nghĩa), sau đó nhấn nút Invoke. Hàm sẽ được thực thi và trả về giá trị tham số làm kết quả.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/7-aws-graviton/7.4-cleanup/",
	"title": "Dọn dẹp",
	"tags": [],
	"description": "",
	"content": "\rBạn nên lưu ý rằng hành động này không thể hoàn tác. Vì vậy, nếu trong hàm đó có chứa đoạn mã hoặc cấu hình quan trọng, hãy đảm bảo rằng bạn đã sao lưu trước khi thực hiện\nChọn EC2 instance bạn muốn xóa: Vào trang EC2 \u0026gt; Instances. Tại bảng danh sách instance, tích chọn instance có tên DotNet8Graviton3 (ID: i-06bb5d87b4248c384). Truy cập chi tiết instance: Nhấp vào Instance ID để mở trang chi tiết của instance. Xóa (Terminate) instance: Trong trang chi tiết, nhấn vào nút Instance state (Góc trên bên phải). Chọn Terminate (delete) instance từ menu xổ xuống. Xác nhận lại khi AWS hỏi để tiến hành xóa. "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/5-infrastructure/5.4-clean-up-test-project/",
	"title": "Dọn dẹp dự án thử nghiệm",
	"tags": [],
	"description": "",
	"content": " Dự án được tạo bằng mẫu sample-app bao gồm một hàng đợi Amazon SQS và một chủ đề Amazon SNS. Bạn sẽ không sử dụng chúng trong dự án của mình, vì vậy hãy xóa chúng khỏi hàm tạo CdkLabStack.\nMở CdkLabStack.cs và dọn dẹp như sau:\nusing Amazon.CDK; namespace CdkLab { public class CdkLabStack : Stack { internal CdkLabStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { // empty } } }` Bây giờ bạn đã chỉnh sửa nội dung của stack, bạn có thể yêu cầu toolkit hiển thị sự khác biệt giữa ứng dụng CDK của bạn và những gì hiện đang được triển khai. Đây là cách an toàn để kiểm tra điều gì sẽ xảy ra khi bạn triển khai và luôn là một thực hành tốt:\ncdk diff Kết quả đầu ra sẽ như sau. Như mong đợi, tất cả tài nguyên sẽ bị xóa.\nChạy cdk deploy và xem các tài nguyên bị xóa:\ncdk deploy "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/4-securely/",
	"title": "Lưu trữ các thông tin an toàn",
	"tags": [],
	"description": "",
	"content": "Mục tiêu của bài thực hành là lưu trữ các khóa bí mật như chuỗi kết nối và mật khẩu trong AWS Systems Manager Parameter Store dưới dạng được mã hóa, sau đó sử dụng hai cách khác nhau để truy xuất giá trị:\nSử dụng các phần mở rộng cho cấu hình của .NET Core. Sử dụng hàm AWS Lambda kết hợp với AWS SDK. AWS Systems Manager Parameter Store cung cấp một nơi lưu trữ có cấu trúc phân cấp và bảo mật cho việc quản lý cấu hình và thông tin bí mật. Bằng cách sử dụng Parameter Store, bạn có thể lưu trữ cấu hình ứng dụng một cách an toàn, tách biệt khỏi mã nguồn của ứng dụng.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/2-serverless-compute/2.4-create-iam-role/",
	"title": "Tạo IAM role",
	"tags": [],
	"description": "",
	"content": "Trên trang AWS Console, nhấp vào liên kết IAM trong phần Security, Identity \u0026amp; Compliance(hoặc tìm kiếm IAM).\nTrên trang IAM, nhấp vào mục Roles ở bên trái.\nTrên trang Roles, nhấp vào nút Create role.\nỞ màn hình tiếp theo, chọn Lambda làm dịch vụ sẽ sử dụng vai trò này, sau đó nhấn nút Next.\nTrên ô tìm kiếm bộ lọc policies, nhập LambdaBasic và chọn policy AWSLambdaBasicExecutionRole.\nNgoài ra, nhập S3Full hoặc đơn giản là s3 vào ô tìm kiếm và chọn policy AmazonS3FullAccess. Nhấn nút Next.\nTrên trang Review, đặt tên vai trò của bạn là ImageResizeLambdaExecutionRole, đảm bảo bạn thấy hai chính sách đã được thêm ở bước trên.\nCuối cùng, nhấp vào nút Create Role.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/3-amazon-api-gateway/3.4-verify-api/",
	"title": "Xác minh API Gateway",
	"tags": [],
	"description": "",
	"content": "Trong AWS Console, nhập api gateway vào ô tìm kiếm để truy cập vào bảng điều khiển API Gateway.\nỨng dụng Serverless mà bạn đã tạo sẽ triển khai một Amazon API Gateway mới.\nTrong menu bên trái, dưới tên API mới tạo, nhấp vào liên kết Resources để xem các tài nguyên của API.\nChọn giá trị ANY dưới {proxy+}.\nPhần nội dung sẽ hiển thị một sơ đồ trực quan về toàn bộ chu trình yêu cầu, bắt đầu với client ở ô bên trái và tài nguyên backend ở ô bên phải.\nMở tab Test. Ở phần loại phương thức, chọn GET làm method, nhập /values làm đường dẫn proxy, rồi nhấn nút Test.\nPhần nội dung phản hồi sẽ hiển thị cùng JSON như bạn đã thấy trong trình duyệt trước đó.\nTruy cập AWS Console và mở CloudWatch.\nTìm kiếm nhóm log có tên serverless-api (tên ứng dụng bạn đã triển khai).\nMở nhóm log. Bạn sẽ thấy các log được gửi từ ứng dụng của bạn cùng các mục log từ lệnh gọi API Get values.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/3-amazon-api-gateway/3.5-test-throttling/",
	"title": "Test throttling",
	"tags": [],
	"description": "",
	"content": "Trong module này, bạn sẽ kiểm tra cấu hình throttling của Amazon API Gateway bằng cách sử dụng một script tải đơn giản.\nBạn có thể truy cập cấu hình Default Method Throttling bằng cách:\nVào mục Stages Nhấp vào stage (ví dụ: Prod) Nhấn Edit Bật throttling, thay đổi giá trị throttling thành 1 request/giây, với tốc độ burst là 1 request. Chúng ta chọn giá trị thấp này để dễ dàng kiểm tra mà không cần phần mềm load-testing. Lưu các thay đổi.\nXác nhận các thay đổi:\nTạo file script PowerShell mới với nội dung sau (thay bằng URL API Gateway của bạn):\nWrite-Output \u0026#34;Sending GET request to your REST endpoint 10 times\u0026#34; for ($i = 0; $i -lt 10; $i++) { Invoke-WebRequest -Uri https://\u0026lt;Your API Endpoint URL\u0026gt;/Prod/values -UseBasicParsing -Method \u0026#39;Get\u0026#39; } Mở PowerShell, chuyển đến thư mục chứa file script. Chạy script bằng cách gõ .\u0026lt;tên-file\u0026gt;.ps1 trong đó \u0026lt;tên-file\u0026gt; là tên bạn đặt cho file.\nTùy thuộc vào kết nối mạng và tốc độ máy tính, bạn sẽ thấy một số yêu cầu thành công với mã trạng thái 200, trong khi các yêu cầu khác sẽ thất bại với thông báo lỗi {“message”:“Too Many Requests”} báo hiệu các yêu cầu bị throttled.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/5-infrastructure/5.5-deploy-aws/",
	"title": "Triển khai AWS Lambda với CDK",
	"tags": [],
	"description": "",
	"content": " Trong mô-đun này, bạn sẽ triển khai một hàm AWS Lambda mẫu bằng cách sử dụng AWS CDK.\nMã xử lý Lambda Trước tiên, chúng ta bắt đầu với mã xử lý của AWS Lambda.\nTạo một thư mục tên là lambda trong thư mục gốc của dự án (cùng cấp với thư mục src).\nThêm một tệp có tên lambda/hello.js với nội dung như sau:\nexports.handler = async function(event) { console.log(\u0026#34;request:\u0026#34;, JSON.stringify(event, undefined, 2)); return { statusCode: 200, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;text/plain\u0026#34; }, body: `Hello, CDK! You\u0026#39;ve hit ${event.path}\\n` }; }; Đây là một hàm AWS Lambda đơn giản trả về văn bản “Hello, CDK! You’ve hit [đường dẫn URL]”. Phần kết quả trả về cũng bao gồm mã trạng thái HTTP và tiêu đề HTTP, được sử dụng bởi API Gateway để tạo phản hồi HTTP cho người dùng.\nCập nhật dự án AWS CDK đi kèm với một thư viện các construct phong phú gọi là AWS Construct Library.\nCập nhật CdkLabStack.cs với các thay đổi sau:\nThêm using statement using Amazon.CDK.AWS.Lambda; Thêm tài nguyên Lambda Function using Amazon.CDK; using Constructs; using Amazon.CDK.AWS.Lambda; namespace CdkLab { public class CdkLabStack : Stack { internal CdkLabStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { // Định nghĩa một tài nguyên Lambda mới var hello = new Function(this, \u0026#34;HelloHandler\u0026#34;, new FunctionProps { Runtime = Runtime.NODEJS_20_X, // môi trường thực thi Code = Code.FromAsset(\u0026#34;lambda\u0026#34;), // mã nguồn nằm trong thư mục \u0026#34;lambda\u0026#34; Handler = \u0026#34;hello.handler\u0026#34; // tệp là \u0026#34;hello\u0026#34;, hàm là \u0026#34;handler\u0026#34; }); } } } Một vài lưu ý:\nHàm sử dụng runtime NodeJS 20.X Mã xử lý được lấy từ thư mục lambda Tên hàm là hello.handler (tức là file hello.js, function handler) Triển khai Trước tiên, chạy lệnh cdk diff để xem trước các thay đổi sẽ được triển khai:\ncdk diff Kết quả sẽ giống như sau:\nNhư bạn có thể thấy, đoạn mã này tạo ra các tài nguyên AWS::Lambda::Function và AWS::IAM::Role. Nó cũng tạo ra một vài tham số CloudFormation được sử dụng bởi toolkit để truyền thông tin vị trí của mã xử lý (handler code).\nLúc này bạn có thể triển khai hàm bằng lệnh:\ncdk deploy Bạn sẽ thấy cảnh báo như sau:\nNhập y để xác nhận triển khai stack và tạo tài nguyên.\nSau khi stack được triển khai, bạn sẽ thấy đầu ra như sau:\nKiểm tra hàm Lambda Trên giao diện AWS Console, nhấp vào liên kết Lambda dưới mục Compute (hoặc tìm kiếm \u0026ldquo;Lambda\u0026rdquo;).\nTìm hàm Lambda của bạn (tên bắt đầu bằng CdkLabStack-HelloHandler) và mở nó.\nChuyển sang tab Test và cấu hình một test event.\nChọn mẫu Amazon API Gateway AWS Proxy (lưu ý giá trị của trường path trong payload mẫu).\nNhấp nút Test để chạy hàm.\nMở rộng phần Details trong pane Executing function: succeeded, bạn sẽ thấy kết quả như mong đợi (trong đó giá trị của path chính là dữ liệu bạn gửi vào).\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/5-infrastructure/",
	"title": "Tự động hóa hạ tầng với CDK .NET",
	"tags": [],
	"description": "",
	"content": "AWS CDK là một framework phát triển phần mềm giúp bạn định nghĩa hạ tầng đám mây dưới dạng mã và triển khai nó thông qua AWS CloudFormation.\nAWS CDK cho phép bạn định nghĩa các tài nguyên đám mây bằng các ngôn ngữ lập trình quen thuộc. AWS CDK hỗ trợ các ngôn ngữ TypeScript, JavaScript, Python, Java và C#/.NET.\nTrong bài thực hành này, bạn sẽ học cách:\nTạo các ứng dụng CDK mới Định nghĩa hạ tầng ứng dụng của bạn bằng Thư viện Construct của AWS Triển khai các ứng dụng CDK lên tài khoản AWS của bạn "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/2-serverless-compute/2.5-public-project/",
	"title": "Xuất bản dự án",
	"tags": [],
	"description": "",
	"content": "Sau khi xây dựng giải pháp của bạn, nhấp chuột phải vào dự án trong Solution Explorer và chọn Publish to AWS Lambda để khởi chạy trình hướng dẫn xuất bản.\nĐảm bảo rằng ô chọn Account profile to use và Region được thiết lập đúng với hồ sơ và vùng bạn đang sử dụng cho bài lab hôm nay. Đặt tên cho Lambda Function là ImageResize, rồi nhấn Next.\nChọn tên Role mà bạn đã tạo ở phần trước của bài lab này và nhấp vào Upload.\nKhi hàm AWS Lambda được xuất bản, bạn có thể thấy nó trong AWS Explorer:\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/2-serverless-compute/2.6-configure-event/",
	"title": "Cấu hình sự kiện",
	"tags": [],
	"description": "",
	"content": "Bây giờ bạn sẽ liên kết một sự kiện Amazon S3 với hàm AWS Lambda của bạn.\nTrên trang AWS Console, nhấp vào liên kết Lambda trong phần Compute (hoặc tìm kiếm Lambda).\nNhấp vào tên hàm AWS Lambda mà bạn đã xuất bản.\nThêm một trigger Amazon S3 vào hàm AWS Lambda bằng cách nhấp vào Add trigger ở bên trái.\nCấu hình trigger: chọn bucket bạn đã tạo trong danh sách thả xuống bucket và nhập images/ làm tiền tố mà AWS Lambda sẽ theo dõi, sau đó nhấn Add.\nĐừng quên định nghĩa tiền tố (prefix)\nHàm AWS Lambda sẽ lưu ảnh thu nhỏ vào một thư mục mới có tên thumbnails trong cùng bucket. Nếu bạn không định nghĩa tiền tố, hàm AWS Lambda sẽ rơi vào vòng lặp đệ quy vì mỗi lần lưu ảnh vào bucket, hàm AWS Lambda sẽ được kích hoạt lại.\nKhi trigger được tạo, bạn sẽ thấy nó trong phần Triggers của hàm AWS Lambda:\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/3-amazon-api-gateway/3.6-cleanup/",
	"title": "Dọn dẹp",
	"tags": [],
	"description": "",
	"content": "\rBạn nên lưu ý rằng hành động này không thể hoàn tác. Vì vậy, nếu trong hàm đó có chứa đoạn mã hoặc cấu hình quan trọng, hãy đảm bảo rằng bạn đã sao lưu trước khi thực hiện\nĐăng nhập vào AWS Console, tìm và chọn API Gateway trong mục Services. Chọn API cần xóa (click vào tên aws-serverless-api). Nhấn nút \u0026ldquo;Delete\u0026rdquo; ở góc trên bên phải. Xác nhận xóa khi được hỏi. "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/6-adding-innovation/",
	"title": "Thêm đổi mới với các dịch vụ AI của AWS",
	"tags": [],
	"description": "",
	"content": "AWS CDK là một framework phát triển phần mềm giúp định nghĩa hạ tầng đám mây dưới dạng mã và triển khai nó thông qua AWS CloudFormation.\nAWS CDK cho phép bạn định nghĩa các tài nguyên đám mây bằng các ngôn ngữ lập trình quen thuộc. AWS CDK hỗ trợ các ngôn ngữ TypeScript, JavaScript, Python, Java và C#/.NET.\nTrong bài thực hành này, bạn sẽ học cách:\nTạo các ứng dụng CDK mới Định nghĩa hạ tầng ứng dụng của bạn bằng Thư viện Construct của AWS Triển khai các ứng dụng CDK lên tài khoản AWS của bạn "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/5-infrastructure/5.6-deploy-amazon/",
	"title": "Triển khai Amazon API Gateway",
	"tags": [],
	"description": "",
	"content": "Bước tiếp theo là thêm Amazon API Gateway phía trước hàm Lambda của bạn. Amazon API Gateway sẽ cung cấp một điểm cuối HTTP công khai mà bất kỳ ai trên Internet đều có thể truy cập bằng trình duyệt web.\nBạn sẽ sử dụng tích hợp proxy của AWS Lambda được gắn vào gốc của API. Điều này có nghĩa là bất kỳ yêu cầu nào đến bất kỳ đường dẫn URL nào đều sẽ được chuyển tiếp trực tiếp đến hàm AWS Lambda của bạn và phản hồi từ hàm đó sẽ được trả về cho người dùng.\nCập nhật dự án Thêm dòng lệnh using sau:\nusing Amazon.CDK.AWS.APIGateway; Tiếp theo, thêm một đối tượng LambdaRestApi vào stack của bạn để định nghĩa một điểm cuối API và liên kết nó với hàm AWS Lambda của bạn.\nnamespace CdkLab { public class CdkLabStack : Stack { internal CdkLabStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { .......... // defines an API Gateway REST API resource backed by our \u0026#34;hello\u0026#34; function. new LambdaRestApi(this, \u0026#34;Endpoint\u0026#34;, new LambdaRestApiProps { Handler = hello }); } } } Chỉ như vậy là đủ. Đây là tất cả những gì bạn cần làm để định nghĩa một Amazon API Gateway chuyển tiếp tất cả yêu cầu đến một hàm AWS Lambda.\nTriển khai Trước tiên, hãy chạy cdk diff để xem các thay đổi sẽ được triển khai:\ncdk diff Nếu bạn cuộn xuống phần đầu ra, bạn sẽ thấy rằng 10 tài nguyên mới sẽ được tạo và một điểm cuối sẽ được xuất ra:\nBây giờ đã đến lúc triển khai Amazon API Gateway.\ncdk deploy Khi việc triển khai hoàn tất, bạn sẽ thấy dòng sau (cuộn đến cuối phần đầu ra):\nĐây là một đầu ra của stack được tự động thêm bởi đối tượng Amazon API Gateway và bao gồm URL của điểm cuối API Gateway.\nGiờ bạn có thể thử mở URL này trong trình duyệt của mình:\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/7-aws-graviton/",
	"title": ".NET 8 trên AWS Graviton",
	"tags": [],
	"description": "",
	"content": "Trong bài thực hành này, bạn sẽ học cách chạy ứng dụng web .NET 8 trên AWS Graviton bằng các bước sau:\nKhởi tạo một instance EC2 mới sử dụng hệ điều hành Ubuntu Server và được trang bị bộ xử lý AWS Graviton Cài đặt .NET 8 SDK và tạo một ứng dụng web mẫu ASP.NET "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/5-infrastructure/5.7-cleanup/",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": "Để xóa stack đã tạo (và tất cả các tài nguyên đã tạo như AWS Lambda và Amazon API Gateway), hãy chạy lệnh sau:\ncdk destroy Bạn sẽ thấy kết quả như sau khi stack đã được xóa:\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/2-serverless-compute/2.7-test-aws-lambda/",
	"title": "Kiểm thử hàm AWS Lambda",
	"tags": [],
	"description": "",
	"content": "Bây giờ là lúc tải lên một file jpg vào S3 bucket để kiểm tra xem sự kiện có được kích hoạt và hàm AWS Lambda có được thực thi hay không.\nTrên AWS Explorer, chọn nút Amazon S3 rồi chọn bucket Amazon S3 mà bạn đã tạo.\nTạo một thư mục mới có tên images bằng cách nhấn nút Create Folder.\nVào thư mục images.\nNhấn nút Upload file, chọn và tải lên một file ảnh thử nghiệm (jpg hoặc jpeg). Sau vài giây, bạn sẽ thấy hình ảnh sẽ được upload trên thư mục images.\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/2-serverless-compute/2.8-cleanup/",
	"title": "Dọn dẹp",
	"tags": [],
	"description": "",
	"content": "\rBạn nên lưu ý rằng hành động này không thể hoàn tác. Vì vậy, nếu trong hàm đó có chứa đoạn mã hoặc cấu hình quan trọng, hãy đảm bảo rằng bạn đã sao lưu trước khi thực hiện\nTruy cập trang \u0026ldquo;Functions\u0026rdquo;: Từ giao diện chính của dịch vụ Lambda, bạn hãy nhìn vào menu bên trái và nhấp vào mục Functions nằm dưới phần Lambda. Chọn hàm cần xóa: Trong danh sách các hàm hiện ra, tìm đến hàm có tên ImageResize. Đánh dấu chọn vào ô bên trái của tên hàm để thực hiện thao tác tiếp theo với nó. Nhấn nút \u0026ldquo;Actions\u0026rdquo;: Ở góc trên bên phải của danh sách hàm, bạn sẽ thấy nút Actions. Nhấp vào nút này để mở ra danh sách các hành động có thể thực hiện. Chọn \u0026ldquo;Delete\u0026rdquo;: Từ menu xổ xuống sau khi nhấn Actions, chọn mục Delete để bắt đầu quá trình xóa hàm. Xác nhận xóa: Hệ thống AWS sẽ hiển thị một hộp thoại yêu cầu bạn xác nhận việc xóa. Hãy làm theo hướng dẫn để xác nhận và hoàn tất việc xóa hàm khỏi tài khoản. "
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/8-cleanup/",
	"title": "Dọn dẹp",
	"tags": [],
	"description": "",
	"content": " Mỗi bài lab đều có hướng dẫn cleanup riêng. → Bạn hãy đọc kỹ phần cleanup ở cuối mỗi lab.\nCleanup giúp tránh bị tính phí ngoài ý muốn. → Nếu bạn không xoá tài nguyên sau khi làm xong, các dịch vụ vẫn hoạt động và có thể gây tốn chi phí.\nCleanup đúng cách là một phần của kỹ năng làm việc chuyên nghiệp. → Việc quản lý tài nguyên tốt giúp tiết kiệm chi phí và giữ môi trường làm việc sạch sẽ.\nChúc các bạn học tốt và triển khai thành công!\n"
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/AWS-Workshop/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]